Your subsystems folder should hold the files for all the subsystems you define for the robot
    Typically each subsystem is a singleton, meaning that the constructor is private and the only way to get an instance of the subsystem
    is to use Subsystem.getInstance(), a method that ensures that only one instance of the Subsystem is ever created.
    
    Subsystems are generally written to contain writable hardware, such as motors, along with some associated sensors/etc, such as 
    encoders, in addition to utility objects such as PIDControllers, feedforward, or kinematics/odometry 
        Kinematics and odometry are generally only used in drivetrain
        
        A subsystem should contain any hardware components that work together to perform a given task. It should not contain too many
        components, otherwise you may not be able to run 2 things at the same time that should be able to be run concurrently

    Subsystems should contain relatively simple methods and do little to no logic themselves. For example, setOpenLoop has been a common
    subsystem method that simply sets the motors of the subsystem to a certain percent speed. You may also have methods to get readings
    from the subsystem, such as a method to return encoder measurements/return encoder readings in human-readable units (i.e. meters)
        An exception to the little-to-no logic rule can be found in more precise subsystems, such as an Arm: if you want the arm to 
        actuate a given distance, you may use a more complex subsystem plan (such as creating a subclass of ProfiledPIDSubsystem) to
        handle the precision logic, while your methods may involve setting a "goal" state (such as fully stored or fully actuated)
    
    For an example of what a subsystem may look like, see ExampleSubsystem.java included in this project